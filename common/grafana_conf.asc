
== Installation du système de monitoring Grafana

Grafana est un logiciel de visualisation et d'analyse à code source ouvert. Il vous permet d'interroger, de visualiser, d'alerter et d'explorer vos mesures, quel que soit l'endroit où elles sont stockées. En clair, il vous fournit des outils pour transformer vos données de base de données de séries chronologiques (TSDB) en de magnifiques graphiques et visualisations.
Grafana s'appuie sur Prometheus afin d'obtenir des métriques.
Loki est aussi installé pour réaliser une analyse précise des fichiers de logs.

Cette installation est optionnelle puisque Munin est déjà installé sur votre système.

=== Création du site web de Grafana

Appliquez la procédure suivante:

. Allez dans la rubrique `DNS`, sélectionnez le menu `Zones`, Sélectionnez votre Zone, Allez dans l'onglet `Records`.
.. Cliquez sur `A` et saisissez:
** `Hostname:` <- Tapez `grafana`
** `IP-Address:` <- Double cliquez et sélectionnez l'adresse IP de votre serveur
.. Cliquez sur `Save`
. Créer un <<#subdomain-site, sub-domain (vhost)>> dans le configurateur de sites.
.. Lui donner le nom `grafana`.
.. Le faire pointer vers le web folder `grafana`.
.. Activer let’s encrypt ssl
.. Activer `Fast CGI` pour PHP
.. Laisser le reste par défaut.
.. Dans l’onglet Options:
.. Dans la boite `Apache Directives:` saisir le texte suivant:
+
[source,apache]
----
<Proxy *>
Order deny,allow
Allow from all
</Proxy>

ProxyRequests Off
ProxyPass /stats !
ProxyPass /.well-known/acme-challenge !

# grafana httpserver
#

SetEnvIf Authorization "(.*)" HTTP_AUTHORIZATION=$1
ProxyPreserveHost    On

ProxyPass / http://localhost:3100/
ProxyPassReverse / http://localhost:3100/

RedirectMatch ^/$ https://grafana.example.com <1>
----
<1> remplacer `example.com` par votre nom de domaine

=== Installation de Grafana

. <<#root_login, Loguez vous comme root sur le serveur>>
. Tapez:
+
[source,bash]
----
echo "deb https://packages.grafana.com/oss/deb stable main" >>/etc/apt/sources.list.d/grafana.list
cd /etc/apt/trusted.gpg.d
wget https://packages.grafana.com/gpg.key grafana.asc
----
. Installez les paquets. Tapez:
+
[source,bash]
----
apt update
apt install grafana prometheus prometheus-mysqld-exporter prometheus-apache-exporter prometheus-bind-exporter prometheus-process-exporter
----
. Editez la configuration de Prometheus. Tapez:
+
[source,bash]
----
vi /etc/prometheus/prometheus.yml
----
. Ajoutez les lignes suivantes:
+
[source,yaml]
----
  - job_name: 'prometheus'

    # Override the global default and scrape targets from this job every 5 seconds.
    scrape_interval: 5s
    scrape_timeout: 5s

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
      - targets: ['localhost:9090']

  - job_name: node
    # If prometheus-node-exporter is installed, grab stats about the local
    # machine by default.
    static_configs:
      - targets: ['localhost:9100']

  - job_name: dns-master
    static_configs:
      - targets: ['localhost:9119']
        labels:
          alias: dns-master

  - job_name: apache
    static_configs:
      - targets: ['localhost:9117']

  - job_name: process
    static_configs:
      - targets: ['localhost:9256']

  - job_name: mysql
    static_configs:
      - targets: ['localhost:9104']
----
. Editez la configuration de `prometheus-process-exporter`. Tapez:
+
[source,bash]
----
vi etc/default/prometheus-process-exporter
----
. Ajoutez les lignes suivantes:
+
[source]
----
ARGS="-procnames postgres,dovecot,apache2,sshd,php-fpm7.3,rspamd,named,mysqld"
----
. Editez la configuration de `prometheus-mysqld-exporter`. Tapez:
+
[source,bash]
----
vi etc/default/prometheus-mysqld-exporter
----
. Ajoutez les lignes suivantes:
+
[source]
----
ARGS='--config.my-cnf /etc/mysql/debian.cnf --collect.info_schema.tables.databases="*" --collect.auto_increment.columns --collect.perf_schema.file_instances.filter=".*" --collect.info_schema.tablestats'
----
. Ajuster les permissions du fichier de conf de mysql pour donner l'accès à prometheus. Tapez:
+
[source,bash]
----
chmod 644 /etc/mysql/debian.cnf
----
. Ajustez la configuration de bind pour servir des statistiques. Tapez:
+
[source,bash]
----
vi /etc/bind/named.conf
----
. Ajouter dans le fichier:
+
[source]
----
statistics-channels {
  inet 127.0.0.1 port 8053 allow { 127.0.0.1; };
};
----
. Activez dans mysql quelques statistiques. Tapez:
+
[source,bash]
----
mysql -p
----
. tapez votre mot de passe root pour mysql. puis taper:
+
[source,mysql]
----
INSTALL PLUGIN QUERY_RESPONSE_TIME_AUDIT SONAME 'query_response_time.so';
INSTALL PLUGIN QUERY_RESPONSE_TIME SONAME 'query_response_time.so';
INSTALL PLUGIN QUERY_RESPONSE_TIME_READ SONAME 'query_response_time.so';
INSTALL PLUGIN QUERY_RESPONSE_TIME_WRITE SONAME 'query_response_time.so';
SET GLOBAL query_response_time_stats=ON;
SET GLOBAL userstat=ON;
----
. Redémarrez les services. Taper:
+
[source,mysql]
----
service prometheus restart
service prometheus-mysqld-exporter restart
service prometheus-process-exporter restart
----

=== Installation et configuration de Loki

Pour installer Loki, appliquez la procédure suivante:

. <<#root_login, Loguez vous comme root sur le serveur>>
. allez sur le site de https://github.com/grafana/loki/releases/[Loki] et copier l'adresse du lien vers la dernière version de loki-linux-amd64.zip (ou loki-linux-arm.zip pour raspberry pi 3 ou loki-linux-arm64.zip pour raspberry pi 4 ou 5)
. Tapez:
+
[source,bash]
----
cd /usr/local/bin
curl -fSL -o loki.gz https://github.com/grafana/loki/releases/download/v1.4.1/loki-linux-amd64.zip
gunzip loki.gz
chmod a+x loki
----
. Créez le fichier de configuration de loki
+
[source,bash]
----
vi /etc/config-loki.yml
----
. Ajoutez le texte ci dessous dans le fichier
+
----
auth_enabled: false

server:
  http_listen_port: 3100
  log_level: "warn"

ingester:
  lifecycler:
    address: 127.0.0.1
    ring:
      kvstore:
        store: inmemory
      replication_factor: 1
    final_sleep: 0s
  chunk_idle_period: 5m
  chunk_retain_period: 30s

schema_config:
  configs:
  - from: 2010-01-01
    store: boltdb
    object_store: filesystem
    schema: v9
    index:
      prefix: index_
      period: 168h

storage_config:
  boltdb:
    directory: /tmp/loki/index

  filesystem:
    directory: /tmp/loki/chunks

limits_config:
  enforce_metric_name: false
  reject_old_samples: true
  reject_old_samples_max_age: 168h

chunk_store_config:
  max_look_back_period: 0

table_manager:
  chunk_tables_provisioning:
    inactive_read_throughput: 0
    inactive_write_throughput: 0
    provisioned_read_throughput: 0
    provisioned_write_throughput: 0
  index_tables_provisioning:
    inactive_read_throughput: 0
    inactive_write_throughput: 0
    provisioned_read_throughput: 0
    provisioned_write_throughput: 0
  retention_deletes_enabled: false
  retention_period: 0

----
. <<#firewall, Debloquez le port 3100 sur votre firewall>>
. Testez maintenant la configuration de Loki. Tapez:
+
[source,bash]
----
loki -config.file /etc/config-loki.yml
----
. Ouvrez un navigateur et visitez: http://example.com:3100/metrics
. Maintenant arrêtez Loki en tapant *CTRL-C*.
. <<#firewall, Bloquez le port 3100 sur votre firewall>>
. Configurez un service Loki afin de le faire tourner en arrière plan. Tapez:
+
[source,bash]
----
vi /etc/systemd/system/loki.service
----
. Ajoutez le texte ci dessous et sauvez:
+
[source]
----
[Unit]
Description=Loki service
After=network.target

[Service]
Type=simple
ExecStart=/usr/local/bin/loki -config.file /etc/config-loki.yml

[Install]
WantedBy=multi-user.target
----
. Maintenant lancez le service et vérifiez que tout est fonctionnel. Tapez:
Now start and check the service is running.
+
[source,bash]
----
sudo service loki start
sudo service loki status
----


=== Installation et configuration de Promtail

Installez maintenant Promtail:

. allez sur le site de https://github.com/grafana/loki/releases/[Loki] et copier l'adresse du lien vers la dernière version de promtail-linux-amd64.zip (ou promtail-linux-arm.zip pour raspberry pi 3 ou promtail-linux-arm64.zip pour raspberry pi 4 ou 5)
. <<#root_login, Loguez vous comme root sur le serveur>>
. Tapez:
+
[source,bash]
----
cd /usr/local/bin
curl -fSL -o promtail.zip https://github.com/grafana/loki/releases/download/v1.4.1/promtail-linux-amd64.zip
gunzip promtail.zip
chmod a+x promtail
----
. Créez la configuration de Promtail. Tapez:
+
[source,bash]
----
mkdir -p /var/log/journal
vi /etc/config-promtail.yml
----
. Et ajoutez le texte suivant puis sauvez:
+
[source]
----
server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://127.0.0.1:3100/api/prom/push

scrape_configs:
- job_name: system
  static_configs:
  - targets:
      - localhost
    labels:
      job: varlogs
      __path__: /var/log/{*.log,*/*.log}
----
. <<#firewall, Debloquez le port 9800 sur votre firewall>>
. testez que Promtail fonctionne. Tapez:
+
[source,bash]
----
promtail -config.file /etc/config-promtail.yml
----
. Ouvrez un navigateur et visitez: http://example.com:9080
. Maintenant arrêtez Promtail en tapant *CTRL-C*.
. <<#firewall, Bloquez le port 9800 sur votre firewall>>
. Configurez un service Promtail afin de le faire tourner en arrière plan. Tapez:
+
[source,bash]
----
vi /etc/systemd/system/promtail.service
----
. Ajoutez le texte ci dessous et sauvez:
+
[source]
----
[Unit]
Description=Promtail service
After=network.target

[Service]
Type=simple
ExecStart=/usr/local/bin/promtail -config.file /etc/config-promtail.yml

[Install]
WantedBy=multi-user.target
----
. Maintenant lancez le service et vérifiez que tout est fonctionnel. Tapez:
+
[source,bash]
----
sudo service promtail start
sudo service promtail status
----
. Allez sur votre site grafana http://grafana.example.com et ajoutez une source de données de type loki
. Mettez l'URL suivante: http://127.0.0.1:3100 . Laissez tout le reste tel quel.
. vous pouvez maintenant explorer vos logs en utilisant le menu explore sur la gauche. Dans la zone texte "Log Labels" essayez ces examples un à un: 
+
[source]
----
{job="varlogs"}
----

=== Upgrade de Grafana

Comme grafana est installé à partir de paquets Debian, la mise à jour s'effectue automatiquement avec le système.

Il reste cependant Loki et Promtail à mettre à jour.

Appliquez la procédure suivante:

. <<#root_login, Loguez vous comme root sur le serveur>>
. allez sur le site de https://github.com/grafana/loki/releases/[Loki] et copier l'adresse du lien vers la dernière version de loki-linux-amd64.zip (ou loki-linux-arm.zip pour raspberry pi 3 ou loki-linux-arm64.zip pour raspberry pi 4 ou 5)
. allez sur le site de https://github.com/grafana/loki/releases/[Loki] et copier l'adresse du lien vers la dernière version de promtail-linux-amd64.zip (ou promtail-linux-arm.zip pour raspberry pi 3 ou promtail-linux-arm64.zip pour raspberry pi 4)
. Mettez à jour Loki et Promtail à jour. Exécutez:
+
[source,bash]
----
cd /usr/local/bin
curl -fSL -o loki.gz https://github.com/grafana/loki/releases/download/v2.2.1/loki-linux-amd64.zip
gunzip loki.gz
chmod a+x loki
curl -fSL -o promtail.zip https://github.com/grafana/loki/releases/download/v2.2.1/promtail-linux-amd64.zip
gunzip promtail.zip
chmod a+x promtail
----
. redémarrez les service. Tapez:
+
[source,bash]
----
sudo service loki restart
sudo service loki status
sudo service promtail restart
sudo service promtail status
----
. Allez sur votre site Grafana http://grafana.example.com
. Vérifiez que tout fonctionne
