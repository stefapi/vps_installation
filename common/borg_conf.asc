== Installation du système de backup BorgBackup

BorgBackup est un système de backup simple mais offrant des fonctionnalités avancées telles que le backup incrémental, la déduplication de données, la compression, l'authentification, l'encryption.

Borg backup est un système de backup offsite. Cela signifie que vous devez avoir accès à un espace de stockage sur un autre site pour effectuer cette sauvegarde.

Pour le moment, BorgBackup n'utilise pas de mécanisme de type RClone et il n'est donc pas encore possible de sauvegarder sur google drive ou autres espaces partagés.

=== Introduction

BorgBackup permet de stocker des backups sur un serveur distant.
Nous nommerons le serveur sur lequel les sauvegardes seront stockées : serveur de stockage et identifié par <storing_srv>.
Nous nommerons le serveur qu'il faut sauvegarder: serveur sauvegardé et identifié par <example.com>

=== Installation du serveur de stockage

Il est préférable pour des questions de sécurité de créer un compte utilisateur spécifique.

Suivez la procédure suivante:

. <<#root_login, Loguez vous comme root sur <storing_srv>. >>
. Tapez:
+
[source,bash]
----
apt install borgbackup
----
. <<#pass_gen, Générez un mot de passe long>>
+
IMPORTANT: Sauvegardez précieusement ce mot de passe. Il vous sera indispensable pour récupérer vos backup après un crash du serveur. Sans celui-ci, impossible de récupérer votre installation !
+
. Créez un compte utilisateur. Tapez:
+
[source,bash]
----
adduser borgbackup
----
. Copiez-collez le mot de passe généré lorsqu'il est demandé
. se loguer comme `borgbackup`
. Créer un répertoire `~/.ssh` s'il n'existe pas. tapez :
+
[source,bash]
----
mkdir -p $HOME/.ssh
chmod 700 ~/.ssh
----
. Allez dans le répertoire. Tapez :
+
[source,bash]
----
cd ~/.ssh
----
. Générez vous clés. Tapez :
+
[source,bash]
----
ssh-keygen -t rsa
----
. Un ensemble de questions apparaît. Si un texte vous explique que le fichier existe déjà, arrêtez la procédure. Cela signifie que vous avez déjà créé une clé et que vous risquez de perdre la connexion à d'autres serveurs si vous en générez une nouvelle. Sinon, appuyez sur Entrée à chaque fois pour accepter les valeurs par défaut.
. Créez maintenant le répertoire pour recevoir les sauvegardes
+
[source,bash]
----
cd
mkdir borgbackup
chmod 700 borgbackup
----

=== Installation sur le serveur sauvegardé

Suivez la procédure suivante:

. <<#root_login, Loguez vous comme root sur <example.com>. >>
. Tapez:
+
[source,bash]
----
apt install borgbackup
----
. Copiez la clé publique de root sur le <storing_srv>. Tapez:
+
[source,bash]
----
ssh-copy-id -i ~/.ssh/id_*.pub borgbackup@<storing_srv>
----
. Coller le mot de passe généré plus haut lorsqu'il est demandé
. Affichez votre adresse IP. tapez:
+
[source,bash]
----
wget -qO- http://ipecho.net/plain; echo
----
. Faites un essai de connexion en tapant:
+
[source,bash]
----
ssh borgbackup@<storing_srv>
----
. Aucun mot de passe ne doit être demandée et vous devez être connecté en tant que borgbackup sur le <storing_srv>
. Si vous êtes très attaché à la sécurité, vous pouvez restreindre l'accès au seul serveur <example.com>. Tapez sur la ligne de commande du <storing_srv> :
+
[source,bash]
----
vi ~/.ssh/authorized_keys
----
. Ajoutez en première ligne du fichier :
+
----
from="SERVERIPADDRESS",command="borg serve --restrict-to-path /home/borgbackup/borgbackup/",no-pty,no-agent-forwarding,no-port-forwarding,no-X11-forwarding,no-user-rc <1>
----
+
<1> remplacez SERVERIPADDRESS par l'adresse IP affichée plus tôt. 
. Fusionnez cette ligne avec la suivante qui démarre par ssh en prenant bien garde de laissez un espace entre no-user-rc et ssh-rsa
. Déconnectez vous en tapant :
+
[source,bash]
----
exit
----
. De retour sur le serveur <example.com>
. <<#pass_gen, Créez un mot de passe pour le dépot borg backup>>.
+
IMPORTANT: Sauvegardez précieusement ce mot de passe. Il vous sera indispensable pour récupérer vos backup après un crash du serveur. Sans celui-ci, impossible de récupérer votre installation !
+
. Puis tapez:
+
[source,bash]
----
export BORG_PASSPHRASE='mot_passe' <1>
----
+
<1> mot_passe doit être remplacé par celui généré plus haut
. Initialisez le dépot borg. Tapez:
+
[source,bash]
----
borg init -e repokey-blake2 borgbackup@<storing_srv>:/home/borgbackup/borgbackup/
----
. Tout est maintenant prêt pour faire un backup
. avec le mode `repokey`, une clé de cryptage est stockée dans le repository de backup. Il est conseillé de la sauvegarder. Pour cela, tapez:
+
[source,bash]
----
borg key export borgbackup@<storing_srv>:/home/borgbackup/borgbackup/
----
. Notez bien la clé qui sert à décrypter le repository dans un endroit sécurisé
=== Effectuer un backup

Nous allons créer tout d'abord un script de backup pour sauvegarder tout le serveur sauf les répertoires système:

. <<#root_login, Loguez vous comme root sur <example.com>. >>
. Tapez:
+
[source,bash]
----
vi /usr/local/bin/borgbackup.sh
----
. Insèrez dans le fichier le texte suivant:
+
[source,bash]
----
#!/bin/sh
export BORG_PASSPHRASE='mot_passe' <1>
cd / && /usr/bin/borg create --stats --progress --compress zstd borgbackup@<storing_srv>:/home/borgbackup/borgbackup/::`hostname`-`date +%Y-%m-%d-%H-%M-%S` ./ --exclude=dev --exclude=proc --exclude=run --exclude=root/.cache/ --exclude=mnt/borgmount --exclude=sys --exclude=swapfile --exclude=tmp && cd <2>
----
+
<1> mot_passe doit être remplacé par celui généré plus haut
<2> en fonction de la puissance de votre machine, vous pouvez remplacer l'algorithme de compression zstd par un algorithme lz4 (rapide) ou  lzma (très lent mais performant en taille).
. changez les permissions du script. Tapez:
+
[source,bash]
----
chmod 700 /usr/local/bin/borgbackup.sh
----
. vous pouvez maintenant effectuer une première sauvegarde en tapant:
+
[source,bash]
----
/usr/local/bin/borgbackup.sh
----

=== Lister les backups

Nous allons créer un script de listage :

. <<#root_login, Loguez vous comme root sur <example.com>. >>
. Tapez:
+
[source,bash]
----
vi /usr/local/bin/borglist.sh
----
. Insèrez dans le fichier le texte suivant:
+
[source,bash]
----
#!/bin/sh
export BORG_PASSPHRASE='mot_passe' <1>
/usr/bin/borg list -v borgbackup@<storing_srv>:/home/borgbackup/borgbackup/
----
<1> mot_passe doit être remplacé par celui généré plus haut.
. changez les permissions du script. Tapez:
+
[source,bash]
----
chmod 700 /usr/local/bin/borglist.sh
----
. vous pouvez maintenant lister vos backup en tapant:
+
[source,bash]
----
/usr/local/bin/borglist.sh
----

=== Obtenir les infos sur un backup

Nous allons créer un script de listage :

. <<#root_login, Loguez vous comme root sur <example.com>. >>
. Tapez:
+
[source,bash]
----
vi /usr/local/bin/borginfo.sh
----
. Insèrez dans le fichier le texte suivant:
+
[source,bash]
----
#!/bin/sh
export BORG_PASSPHRASE='mot_passe' <1>
/usr/bin/borg info --progress borgbackup@<storing_srv>:/home/borgbackup/borgbackup/::$1
----
<1> mot_passe doit être remplacé par celui généré plus haut.
. changez les permissions du script. Tapez:
+
[source,bash]
----
chmod 700 /usr/local/bin/borginfo.sh
----
. vous pouvez maintenant lister vos backup en tapant:
+
[source,bash]
----
/usr/local/bin/borginfo.sh
----

=== Vérifier un backup

Nous allons créer un script de vérification :

. <<#root_login, Loguez vous comme root sur <example.com>. >>
. Tapez:
+
[source,bash]
----
vi /usr/local/bin/borgcheck.sh
----
. Insèrez dans le fichier le texte suivant:
+
[source,bash]
----
#!/bin/sh
export BORG_PASSPHRASE='mot_passe' <1>
/usr/bin/borg check --progress borgbackup@<storing_srv>:/home/borgbackup/borgbackup/::$1
----
<1> mot_passe doit être remplacé par celui généré plus haut.
. changez les permissions du script. Tapez:
+
[source,bash]
----
chmod 700 /usr/local/bin/borgcheck.sh
----
. vous pouvez maintenant vérifier un de vos backup en tapant:
+
[source,bash]
----
/usr/local/bin/borgcheck.sh <nom_de_sauvegarde> <1>
----
<1> le nom de sauvegarde est récupéré en utilisant la commande borglist.sh

=== Restaurer un backup

Nous allons créer un script de montage sous forme de système de fichier :

. <<#root_login, Loguez vous comme root sur <example.com>. >>
. Tapez:
+
[source,bash]
----
vi /usr/local/bin/borgmount.sh
----
. Insérez dans le fichier le texte suivant:
+
[source,bash]
----
#!/bin/sh
mkdir -p /mnt/borgbackup
export BORG_PASSPHRASE='mot_passe' <1>
/usr/bin/borg mount borgbackup@<storing_srv>:/home/borgbackup/borgbackup/ /mnt/borgbackup
----
+
<1> mot_passe doit être remplacé par celui généré plus haut.
. changez les permissions du script. Tapez:
+
[source,bash]
----
chmod 700 /usr/local/bin/borgmount.sh
----
. vous pouvez maintenant monter vos backups et effectuer des opérations de fichiers. Tapez:
+
[source,bash]
----
/usr/local/bin/borgmount.sh
----
. Pour créer un script pour démonter les backups. Tapez:
+
[source,bash]
----
vi /usr/local/bin/borgumount.sh
----
. Insérez dans le fichier le texte suivant:
+
[source,bash]
----
#!/bin/sh
umount /mnt/borgbackup
rmdir /mnt/borgbackup
----
. changez les permissions du script. Tapez:
+
[source,bash]
----
chmod 700 /usr/local/bin/borgumount.sh
----
. vous pouvez maintenant demonter vos backups. Tapez:
+
[source,bash]
----
/usr/local/bin/borgumount.sh
----

=== Supprimer vos vieux backups

Nous allons créer un script de ménage des backups :

. <<#root_login, Loguez vous comme root sur <example.com>. >>
. Tapez:
+
[source,bash]
----
vi /usr/local/bin/borgprune.sh
----
. Insèrez dans le fichier le texte suivant:
+
[source,bash]
----
#!/bin/sh

# Nettoyage des anciens backups
# On conserve
# - une archive par jour les 7 derniers jours,
# - une archive par semaine pour les 4 dernières semaines,
# - une archive par mois pour les 6 derniers mois.


export BORG_PASSPHRASE='mot_passe' <1>
/usr/bin/borg prune --stats --progress borgbackup@<storing_srv>:/home/borgbackup/borgbackup/ --prefix `hostname`- --keep-daily=7 --keep-weekly=4 --keep-monthly=12 <2>
----
<1> mot_passe doit être remplacé par celui généré plus haut.
<2> Le nettoyage des sauvegardes va conserver 7 sauvegardes journalières, 4 à la semaine et 12 au mois
. changez les permissions du script. Tapez:
+
[source,bash]
----
chmod 700 /usr/local/bin/borgprune.sh
----
. vous pouvez maintenant effectuer du ménage:
+
[source,bash]
----
/usr/local/bin/borgprune.sh
----
. Pour récupèrer l'espace libéré par la suppression des sauvegardes inutiles, créez le script suivant:
+
[source,bash]
----
vi /usr/local/bin/borgcompact.sh
----
. Insèrez dans le fichier le texte suivant:
+
[source,bash]
----
#!/bin/sh

export BORG_PASSPHRASE='mot_passe' <1>
/usr/bin/borg compact --progress  borgbackup@<storing_srv>:/home/borgbackup/borgbackup/


----
<1> mot_passe doit être remplacé par celui généré plus haut.
. changez les permissions du script. Tapez:
+
[source,bash]
----
chmod 700 /usr/local/bin/borgcompact.sh
----
. vous pouvez maintenant effectuer du ménage:
+
[source,bash]
----
/usr/local/bin/borgcompact.sh
----
=== Automatisez votre sauvegarde

. Pour créer un script automatisé de backup. Tapez:
+
[source,bash]
----
mkdir -p /var/log/borg
vi /usr/local/bin/borgcron.sh
----
. Insérez dans le fichier le texte suivant:
+
[source,bash]
----
#!/bin/sh
#
# Script de sauvegarde.
#

set -e

LOG_PATH=/var/log/borg/cron.log

/usr/local/bin/borgbackup.sh >> ${LOG_PATH} 2>&1
/usr/local/bin/borgprune.sh >> ${LOG_PATH} 2>&1
/usr/local/bin/borgcompact.sh >> ${LOG_PATH} 2>&1
----
. changez les permissions du script. Tapez:
+
[source,bash]
----
chmod 700 /usr/local/bin/borgcron.sh
----
. vous pouvez ensuite planifier votre backup à 1h du matin. Tapez:
+
[source,bash]
----
crontab -e
----
. Inserez ensuite le texte suivant:
----
# Backup via Borg to backup server 
00 01 * * * /usr/local/bin/borgcron.sh
----

=== Restauration d'urgence.

En cas de crash du serveur, l’intérêt du backup offsite est de pouvoir remonter la dernière sauvegarde sans souci.
Pour cela il faut avoir un moyen de booter le serveur dans un mode rescue (boot du VPS en mode rescue, utilisation d'un clé USB bootable, boot réseau ou autre moyen).

On suppose dans ce qu'il suit que vous avez booté sur un linux de type debian ou ubuntu dont la version n'est pas la toute dernière et dans laquelle borg-backup n'est pas obligatoirement présent du moins dans un version suffisamment récente.

. loguez vous root sur votre serveur. A noter que, comme vous êtes en mode rescue, l'accès au mode est indiqué par votre hébergeur ou, si vous avez booté sur une clé USB en local, l'accès root s'effectue souvent avec une commande `sudo bash`
. Montez votre partition racine. Sur un VPS, la partition est souvent déjà montée dans le répertoire /mnt. Sur un PC c'est souvent /dev/sda1. Sur un Raspberry Pi cette partition est /dev/mmcblk0p7. Tapez la commande:
+
[source,bash]
----
mkdir -p /mnt/root
mount /dev/mmcblk0p7 /mnt/root
----
. Installez borgbackup. Tapez:
+
[source,bash]
----
apt install python3-pip libssl-dev cython3 gcc g++ libpython3-dev libacl1-dev python3-llfuse libfuse-dev
pip3 install -U pip setuptools wheel
pip3 install pkgconfig
pip3 install borgbackup[llfuse]
----
. Si la compilation échoue, c'est qu'il manque des packages. lisez attentivement les logs et installez les packages manquant.
. Munissez vous du mot de passe <mot_passe> des archives borg et tapez:
+
[source,bash]
----
mkdir -p /mnt/borgbackup
export BORG_PASSPHRASE='mot_passe' <1>
borg list borgbackup@<storing_srv>:/home/borgbackup/borgbackup/
----
<1> remplacez mot_passe par votre mot de passe de borg
. tapez le mot de passe du compte borgbackup.
. la liste des sauvegardes est affichées à l'écran.
. Choisissez l'archive qui vous convient et tapez:
+
[source,bash]
----
cd /mnt/root
borg extract --list borgbackup@<storing_srv>:/home/borgbackup/borgbackup/::<votre_archive>
----
. tapez le mot de passe du compte borgbackup.
. la restauration s'effectue et peut prendre des heures ! soyez patient.
. il peut être nécessaire de réinstaller le bootloader (non utile sur VPS ou raspberry). Tapez:
+
[source,bash]
----
cd /mnt/root
chroot . bash
mkdir -p dev proc run sys tmp
mount -t devtmpfs dev /dev
mount -t proc proc /proc
grub_install /dev/sda <1>
umount /proc
umount /dev
sync
exit
----
+
<1> tapez ici le nom de device de votre disque de boot
. Créez votre fichier de swap en suivant <<#swap_create,la
  procédure>>. Attention le fichier de swap doit être installé dans
  `/mnt/root/swapfile`
. vous pouvez maintenant rebooter votre machine en mode normal.
. une autre façon de remonter la sauvegarde est d'extraire un fichier tar.xz directement du serveur de stockage et de transférer cette archive sur la machine en mode rescue puis de décompresser. La commande de génération d'archive est:
+
[source,bash]
----
borg export-tar --list borgbackup@<storing_srv>:/home/borgbackup/borgbackup/::<votre_archive> restore.tar.xz
----

=== Installation de Borgweb

Borgweb existe en version officielle. Cette version n'a pas trop d'intéret pour nous étant donnée qu'elle n'interroge pas le serveur de stockage pour obtenir les informations des backups réalisés. Il existe un clone de repository qui implémente une fonctionnalité qui liste tous les backups effectués sur le serveur de stockage

Suivez la procédure suivante sur le serveur de stockage:

. <<#root_login, Loguez vous comme root sur <storing_srv>. >>
. Installez pip  pour python3 et NPM. Tapez:
+
[source,bash]
----
apt install python3-pip npm
----
. Installer le logiciel dans le répertoire `/var/lib/borgweb`. Tapez:
+
[source,bash]
----
mkdir -p /var/lib/borgweb
cd /var/lib/borgweb
git clone https://github.com/vche/borgweb.git
----
. Dans la version testée, le fichier `README.rst` est utilisé par l'installeur mais plus présent dans le repo. Tapez:
+
[source,bash]
----
cd borgweb
touch README.rst
----
. Lancez l'installation. Tapez:
+
[source,bash]
----
pip3 install -e .
cd js
npm install
----
. Editez la configuration. Comme la variable d'environnement `BORG_CONFIG` semble n'avoir aucun effet, éditez directement le fichier de configuration du repository. Tapez:
+
[source,bash]
----
cd /var/lib/borgweb/borgweb/borgweb
vi config.py
----
. Mettez ce texte dans le fichier édité:
+
[source,python]
----
class Config(object):
    """This is the basic configuration class for BorgWeb."""

    #: builtin web server configuration
    HOST = '127.0.0.1'  # use 0.0.0.0 to bind to all interfaces
    PORT = 5000  # ports < 1024 need root
    DEBUG=False

    #: borg / borgweb configuration
    LOG_DIR = '/var/log/borg'
    BORG_PATH="/usr/bin/borg"

    # Repo status cache configuration. TTL in secs
    STATUS_CACHE_TTL=43200
    STATUS_CACHE_PATH="/tmp/borgweb.cache"

    BACKUP_REPOS = {
        # Repo  name
        "example.com": { <2>
            # Repo absolute path
            "repo_path": "/home/borgbackup/borgbackup",

            # Repo logs absolute path, or relative to the main LOG_DIR
            "log_path": "/var/log/borg/",

            # Repo password
            "repo_pwd": "your_password", <1>

            # Command/script to run to manually start a backup.
            # If left empty or not specified, the backup won't be
            # manually runnable
            "script": "script",

            # Filled with discovered backups in the repo
            "backups": []
        }
    }
----
<1> Insérez ici le mot de passe du dépot Borg Backup
<2> Mettez ici le nom de votre domaine sauvegardé
. Créez un service `systemd`. Editez le fichier de service. Tapez:
+
[source,bash]
----
vi /etc/systemd/system/borgweb.service
----
. Insérez dans le fichier le texte suivant:
+
[source]
----
[Unit]
Description=Borgweb Daemon
After=syslog.target network.target

[Service]
WorkingDirectory=/var/lib/borgweb
User=root
Group=root
UMask=0002
Restart=on-failure
RestartSec=5
Type=simple
ExecStart=/usr/local/bin/borgweb
KillSignal=SIGINT
TimeoutStopSec=20
SyslogIdentifier=borgweb

[Install]
WantedBy=multi-user.target
----
. Recharge la base de systemd. Tapez:
+
[source,bash]
----
systemctl daemon-reload
----
. Activez et démarrez `borgweb`. Tapez:
+
[source,bash]
----
systemctl enable borgweb.service
systemctl start borgweb.service
----

=== Création du site web de Borgweb

Appliquez les opérations suivantes Dans ISPConfig de votre serveur de stockage <storing_srv>:

. Allez dans la rubrique `DNS`, sélectionnez le menu `Zones`, Sélectionnez votre Zone, Allez dans l'onglet `Records`.
.. Cliquez sur `A` et saisissez:
** `Hostname:` <- Tapez `borgweb`
** `IP-Address:` <- Double cliquez et sélectionnez l'adresse IP de votre serveur
.. Cliquez sur `Save`
. Créer un <<#subdomain-site, sub-domain (vhost)>> dans le configurateur de sites.
.. Lui donner le nom `borgweb`.
.. Le faire pointer vers le web folder `borgweb`.
.. Sélectionnez `None` dans `Auto-subdomain`
.. Activer `let’s encrypt SSL`
.. Activer `PHP-FPM` pour PHP
.. Dans l'onglet Redirect Cochez la case `Rewrite HTTP to HTTPS`
.. Laisser le reste par défaut.
.. Dans l’onglet Options:
.. Dans la boite `Apache Directives:` saisir le texte suivant:
+
[source,apache]
----
<Proxy *>
Order deny,allow
Allow from all
</Proxy>

# borgweb httpserver
#

<Location />
    AllowOverride AuthConfig
    AuthUserFile /var/lib/borgweb/borgweb-htpasswd
    AuthName "Borgweb"
    AuthType Basic
    Require valid-user

</Location>


ProxyRequests Off
ProxyPass /stats !
ProxyPass /.well-known/acme-challenge !

# borgweb httpserver
#

SetEnvIf Authorization "(.*)" HTTP_AUTHORIZATION=$1
ProxyPreserveHost    On
ProxyPass / http://localhost:5000/
ProxyPassReverse / http://localhost:5000/

RedirectMatch ^/$ https://borgweb.example.com <1>
----
<1> remplacer `example.com` par votre nom de domaine
. <<#root_login, Loguez vous comme root sur <storing_srv>. >>
. Créez ensuite le fichier de mot de passe de borgweb dans votre <storing_srv>:
+
[source,bash]
----
htpasswd -c /var/lib/borgweb/borgweb-htpasswd admin
----
. Tapez <<#pass_gen, votre mot de passe généré>>
. Redémarrez apache. Tapez:
+
[source,bash]
----
service apache2 restart
----
. Pointez votre navigateur sur https://borgweb.storing_srv , un mot de passe vous est demandé. Tapez `admin` pour le user et le password saisi. Vous accédez aux informations de sauvegarde de votre site.
