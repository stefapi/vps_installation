== Configuration du Motd

Le motd est affiché au moment ou l'utilisateur se loggue en ssh. Nous allons configurer l'affichage de plusieurs informations importantes.


=== Installation de Neofetch

Neofetch affiche au démarrage de votre système des informations sur le fonctionnement de celui-ci.

Nous allons créer une configuration système:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Installez le package neofetch. Tapez :
+
[source,bash]
----
apt install neofetch
----
. Editez ensuite le fichier `/etc/neofetch.conf`. Tapez:
+
[source,bash]
----
vi /etc/neofetch.conf
----
. Mettez ensuite dans le fichier la configuration suivante:
+
[source,bash]
----
print_info() {
    info title
    info underline

    info "OS" distro
    info "Host" model
    info "Kernel" kernel
    info "Uptime" uptime
    info "Packages" packages
    info "Shell" shell
    info "Resolution" resolution
    info "DE" de
    info "WM" wm
    info "WM Theme" wm_theme
    info "Theme" theme
    info "Icons" icons
    info "Terminal" term
    info "Terminal Font" term_font
    info "CPU" cpu
    info "CPU Usage" cpu_usage
    prin "CPU Temp" "$(vcgencmd measure_temp | awk -F '=' '{print $2}')" <1>
    prin "Load" "$(cat /proc/loadavg | awk '{print $1, $2, $3}')"
    info "GPU" gpu
    info "GPU Driver" gpu_driver  # Linux/macOS only
    info "Memory" memory
    info "Disk" disk
    info "Local IP" local_ip
    info "Public IP" public_ip
    info "Users" users
    info "Locale" locale  # This only works on glibc systems.

    info cols
}

title_fqdn="on"
memory_percent="on"
memory_unit="mib"
package_managers="on"
image_backend="ascii"
cpu_temp="on"
----
<1> Cette ligne est à retirer si vous n'utilisez pas de Raspberry PI 4 ou 5

=== Configuration du MOTD avec Neofetch

Pour afficher les informations au moment du login ssh, vous devez modifier le fichier Motd:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Editez le fichier Neofetch du MOTD
+
[source,bash]
----
vi /etc/update-motd.d/20-neofetch
----
. Mettez ensuite dans le fichier la configuration suivante:
+
[source,bash]
----
#!/bin/sh
neofetch --config /etc/neofetch.conf
----
. Changez les permissions du fichier `20-neofetch`. Tapez:
+
[source,bash]
----
chmod 755 /etc/update-motd.d/20-neofetch
----
. A notez que vous pouvez utiliser Neofetch pour votre fichier `.bash_profile`

=== Mise à jour de packages

Vous pouvez ajouter la liste des mises à jours dans le fichier MOTD:

. Installez le package python de gestion APT. Tapez :
+
[source,bash]
----
apt install python3-apt
----
. Editez le fichier MOTD
+
[source,bash]
----
vi /etc/update-motd.d/30-updates
----
. Dans le fichier mettez le contenu suivant:
+
[source,python]
----
#!/usr/bin/python
import sys
import subprocess
import apt_pkg

DISTRO = subprocess.Popen(["lsb_release", "-c", "-s"],
                          stdout=subprocess.PIPE).communicate()[0].strip()

class OpNullProgress(object):
    '''apt progress handler which supresses any output.'''
    def update(self):
        pass
    def done(self):
        pass

def is_security_upgrade(pkg):
    '''
    Checks to see if a package comes from a DISTRO-security source.
    '''
    security_package_sources = [("Ubuntu", "%s-security" % DISTRO),
                               ("Debian", "%s-security" % DISTRO)]

    for (file, index) in pkg.file_list:
        for origin, archive in security_package_sources:
            if (file.archive == archive and file.origin == origin):
                return True
    return False

# init apt and config
apt_pkg.init()

# open the apt cache
try:
    cache = apt_pkg.Cache(OpNullProgress())
except SystemError as e:
    sys.stderr.write("Error: Opening the cache (%s)" % e)
    sys.exit(-1)

# setup a DepCache instance to interact with the repo
depcache = apt_pkg.DepCache(cache)

# take into account apt policies
depcache.read_pinfile()

# initialise it
depcache.init()

# give up if packages are broken
if depcache.broken_count > 0:
    sys.stderr.write("Error: Broken packages exist.")
    sys.exit(-1)

# mark possible packages
try:
    # run distro-upgrade
    depcache.upgrade(True)
    # reset if packages get marked as deleted -> we don't want to break anything
    if depcache.del_count > 0:
        depcache.init()

    # then a standard upgrade
    depcache.upgrade()
except SystemError as e:
    sys.stderr.write("Error: Couldn't mark the upgrade (%s)" % e)
    sys.exit(-1)

# run around the packages
upgrades = 0
security_upgrades = 0
for pkg in cache.packages:
    candidate = depcache.get_candidate_ver(pkg)
    current = pkg.current_ver

    # skip packages not marked as upgraded/installed
    if not (depcache.marked_install(pkg) or depcache.marked_upgrade(pkg)):
        continue

    # increment the upgrade counter
    upgrades += 1

    # keep another count for security upgrades
    if is_security_upgrade(candidate):
        security_upgrades += 1

    # double check for security upgrades masked by another package
    for version in pkg.version_list:
        if (current and apt_pkg.version_compare(version.ver_str, current.ver_str) <= 0):
            continue
        if is_security_upgrade(version):
            security_upgrades += 1
            break

print("%d updates to install." % upgrades)
print("%d are security updates." % security_upgrades)
print("")  # leave a trailing blank line
----
. Changez les permissions du fichier `30-updates`. Tapez:
+
[source,bash]
----
chmod 755 /etc/update-motd.d/30-updates
----
