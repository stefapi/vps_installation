== Créer une interface vers un serveur https obsolète

Il peut être nécessaire dans un environnement où l'on ne maitrise pas un serveur https d'avoir besoin de l'interfacer dans un environnement récent.

Ce cas arrive pour des équipements domotiques anciens qui ne sont plus maintenus  mais que l'on veut continuer d'interfacer.
Dans mon cas présent j'ai du le faire pour une alarme de la marque Somfy Protexiom qui utilise du SSLV3 avec du RC4-MD5

Tout d'abord, il est déconseillé de mettre cet équipement sur votre réseau principal pour deux raisons:
- peut être incompatible avec le protocole IPV6 et planter (c'est le cas de l'alarme Somfy)
- pour des questions de sécurité c'est une mauvaise idée de laisser cet équipement sur le réseau principal

Pour cela nous vous conseillons de configurer une interface supplémentaire comme indiqué dans le chapitre précédent sans IPV6 et d'y connecter votre équipement.

=== Compiler openssl

L'openSSL natif ne supporte plus ces protocoles anciens et c'est une bonne chose.

Nous allons donc recompiler une version ancienne mais compatible des anciens équipements.

Pour cela:

. Téléchargez le code source d’une version d’OpenSSL qui permet encore d’activer SSLv3 (par exemple OpenSSL 1.0.2, ou même plus ancien).
. <<#root_login, Loguez vous comme root sur le serveur>>
. Tapez :
+
[source,bash]
----
wget https://github.com/openssl/openssl/releases/download/OpenSSL_1_0_2u/openssl-1.0.2u.tar.gz
tar xvf openssl-1.0.2u.tar.gz
cd openssl-1.0.2u
./Configure --prefix=/usr/local/openssl-1.0.2 \
    --openssldir=/usr/local/openssl-1.0.2/ssl \
    enable-ssl3 \
    linux-aarch64 <1>
make depend
make
make install_sw
----
<1> ici nous compilons pour arm en 64 bits. Ajustez cette valeur en fonction de votre processeur cible.
. Vous aurez ainsi une installation parallèle (par exemple dans /usr/local/openssl-1.0.2). Prenez soin de ne pas remplacer le libssl.so officiel du système, car cela risque de tout casser.
. vérifiez que vous avec bien le protocole qui vous manquait. tapez:
+
[source,bash]
----
/usr/local/openssl-1.0.2-weak/bin/openssl ciphers -v 'ALL'
----
. Vous devez voir toute une suite de protocoles dont RC4-MD5 qui nous manquait.

=== Compiler stunnel

Nous allons prendre une version récente de stunnel qui reste compatible de la version 1.0 d'openSSL.

Ensuite, compilez (ou recompilez) stunnel ou socat pour qu’ils utilisent cette version personnalisée d’OpenSSL.

Pour cela:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Tapez :
+
[source,bash]
----
tar xvf stunnel-5.x.tar.gz
cd stunnel-5.x
PKG_CONFIG_PATH=/usr/local/openssl-1.0.2/lib/pkgconfig ./configure \
    --with-ssl=/usr/local/openssl-1.0.2 \
    --prefix=/usr/local/stunnel-sslv3
    LDFLAGS="-Wl,-rpath=/usr/local/openssl-1.0.2/lib
make
make install
----
. Ceci produira un exécutable stunnel lié contre votre OpenSSL 1.0.2 local, qui pourra supporter SSLv3 (et RC4).


=== Configurer stunnel

Nous allons passer à la partie configuration:
. <<#root_login, Loguez vous comme root sur le serveur>>
. éditez un fichier `/etc/stunnel_legacy.conf`
. Tapez :
+
[source,bash]
----
; Activation du mode client
client = yes

; On logue dans un fichier (si vous voulez)
output = /var/log/stunnel.log

; Désactivation du chroot, pour simplifier le test
; (ou ajustez selon vos besoins)
;chroot = /var/run/stunnel
pid = /stunnel.pid

; On définit le service sslv3proxy
[sslv3proxy]
; Port local en clair sur lequel on écoute
accept = 0.0.0.0:8000 <2>

; Adresse du serveur distant et son port HTTPS
connect = old-server:443 <1>

; Forcer SSLv3 uniquement
sslVersion = SSLv3

; Forcer la suite RC4-MD5
ciphers = RC4-MD5

; Éventuellement, désactiver explicitement TLS 1.x
; pour ne pas tenter d'autres protocoles
options = NO_TLSv1
options = NO_TLSv1_1
options = NO_TLSv1_2
----
<1> remplacer `old-server` par l'adresse IP de votre serveur obsolète.
<2> remplacez le port 8000 par le port que vous désirez utiliser
. Ensuite lancez stunnel pour vérifier que tout fonctionne. Tapez:
+
[source,bash]
----
sudo LD_LIBRARY_PATH=/usr/local/openssl-1.0.2/lib /usr/local/stunnel-sslv3/bin/stunnel /etc/stunnel_legacy.conf
----
Assurez-vous que stunnel accepte de démarrer (pas d’erreur dans /var/log/stunnel.log ou dans la console).
. Faites un simple curl http://localhost:8000/...
. Si tout se passe bien, vous verrez la page du vieux serveur s’afficher (ou vous aurez accès à l’API).

=== Création du systemd de lancement

Nous allons créer un fichier pour lancer automatiquement le serveur stunnel:

. <<#root_login, Loguez vous comme root sur le serveur>>
. éditez un fichier `/etc/systemd/system/stunnel-legacy.service`
. Tapez dans le fichier :
+
[source,bash]
----
[Unit]
Description=Stunnel legacy service
After=network.target

[Service]
Type=forking
PIDFile=/var/run/stunnel.pid

# Chemin vers votre exécutable stunnel compilé (ajustez si besoin)
ExecStart=LD_LIBRARY_PATH=/usr/local/openssl-1.0.2/lib /usr/local/stunnel-sslv3/bin/stunnel /etc/stunnel_legacy.conf

# Redémarrer automatiquement en cas de crash
Restart=on-failure

[Install]
WantedBy=multi-user.target
----
. Rechargez la configuration systemd :
+
[source,bash]
----
systemctl daemon-reload
----
. Activez le service au démarrage :
+
[source,bash]
----
systemctl enable stunnel-legacy
----
. Lancez-le immédiatement :
+
[source,bash]
----
systemctl start stunnel-legacy
----
. Vérifiez le statut :
+
[source,bash]
----
systemctl status stunnel-legacy
----
. Si tout est OK, stunnel sera désormais démarré automatiquement à chaque boot.
. Vous avez maintenant une passerelle automatique vers votre serveur https obsolète. Vous pouvez maintenant connecter avec ispconfig et une configuration reverse proxy un sous-domaine qui lui utilisera un certificat SSL et des protocoles récents.

