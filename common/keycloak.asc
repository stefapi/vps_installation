 
== Installation de Keycloak

le logiciel `Keycloak` est un logiciel de portail d'authentification offrant de nombreuses possibilités de configuration. Il est compatible OpenID et SAML V2.
Il sait se connecter à tout un ensemble de fournisseur d'identité tels que Microsoft, paypal, google, twitter, linkedin, facebook github ...

=== Prérequis

Il vous faudra tout d'abord installer `docker` en vous référant au chapitre qui y est consacré.

=== Installation du serveur Keycloak

Nous allons installer Keycloak à partir d'un docker compose. La configuration sera liée à une base de données Postgresql

Ouvrez un terminal et suivez la procédure:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Allez dans le répertoire de root
. Créez un répertoire  keycloak. Tapez:
+
[source,bash]
----
mkdir keycloak
cd keycloak
vi docker-compose.yml
----
. Dans le fichier qui vient de s'ouvrir, coller le code suivant:
+
[source,yaml]
----
version: "3.4"

services:
  keycloak_db:
    image: postgres:alpine
    environment:
        - POSTGRES_DB=keycloak
        - POSTGRES_USER=keycloak
        - POSTGRES_PORT=5432
        - POSTGRES_PASSWORD=mot_de_passe1 <1>
        - POSTGRES_ROOT_PASSWORD=mot_de_passe2 <1>
    volumes:
      - ./data:/var/lib/postgresql/data
    labels:
      - "traefik.enable=false"
    restart: always
  auth:
    container_name: auth
    image: quay.io/keycloak/keycloak:latest
    hostname: auth
    environment:
      - DB_VENDOR=POSTGRES
      - DB_ADDR=keycloak_db
      - DB_DATABASE=keycloak
      - DB_PORT=5432
      - DB_USER=keycloak
      - DB_SCHEMA=public
      - DB_PASSWORD=mot_de_passe1
      - PROXY_ADDRESS_FORWARDING=true
      - KEYCLOAK_LOGLEVEL=INFO
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=mot_de_passe3 <1>
    ports:
      - 8081:8080
    depends_on:
      - keycloak_db
    command: start-dev
    restart: always
----
<1> Dans le fichier remplacer `mot_de_passex` par un mot de passe sécurisé et différent
. lancer les containers. Tapez:
+
[source,bash]
----
docker-compose up -d
----

=== Création du site web de auth

Appliquez la procédure suivante:

. Allez dans la rubrique `DNS`, sélectionnez le menu `Zones`, Sélectionnez votre Zone, Allez dans l'onglet `Records`.
.. Cliquez sur `A` et saisissez:
** `Hostname:` <- Tapez `auth`
** `IP-Address:` <- Double cliquez et sélectionnez l'adresse IP de votre serveur
.. Cliquez sur `Save`
. Créer un <<#subdomain-site, sub-domain (vhost)>> dans le configurateur de sites.
.. Lui donner le nom `auth`.
.. Le faire pointer vers le web folder `auth`.
.. Activer let’s encrypt ssl
.. Activer `Fast CGI` pour PHP
.. Laisser le reste par défaut.
.. Dans l’onglet Options:
.. Dans la boite `Apache Directives:` saisir le texte suivant:
+
[source,apache]
----

<Proxy *>
Order deny,allow
Allow from all
</Proxy>

ProxyRequests Off
ProxyPass /stats !
ProxyPass /.well-known/acme-challenge !

# redirect from server
#

SetEnvIf Authorization "(.*)" HTTP_AUTHORIZATION=$1
SSLProxyEngine On # Comment this out if no https required
ProxyPreserveHost    On
SSLProxyVerify none
SSLProxyCheckPeerCN off
SSLProxyCheckPeerName off
SSLProxyCheckPeerExpire off

ProxyPass / https://localhost:8081/
ProxyPassReverse / https://localhost:8081/

RedirectMatch ^/$ https://auth.example.com <1>
----
<1> remplacer `example.com` par votre nom de domaine

=== Configuration du site auth

Votre site web `auth` est installé et actif.

. Pointez votre navigateur sur votre site web `auth`
. Cliquez sur "Administration Console"
. Logguez vous en tapant dans login->"admin" et dans password->"mot_de_passe3"
. Vous êtes maintenant loggué et pouvez configurer votre keycloak

=== Upgrade de Keycloak

Rien a faire pour la mise à jour si vous utilisez `Watchtower`
Vous pouvez aussi appliquer la procédure de mise à jour des containers à l'aide de <<#port_container_updt, `Portainer`>> ou à l'aide <<#yacht_container_updt, `Yacht`>>

Sinon, effectuez les opérations suivantes:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Allez dans le répertoire de root
. Mettez à jour le docker de keycloak. Tapez:
+
[source,bash]
----
docker-compose pull
docker-compose restart
----

