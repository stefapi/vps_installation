 
== Installation de XbrowserSync

le logiciel `XbrowserSync` est un logiciel comportant des plugins pour la plupart des navigateurs et pour smartphone. Il permet la synchronisation des bookmarks sur de multiples périphériques.

=== Prérequis

Il vous faudra tout d'abord installer `docker` en vous référant au chapitre qui y est consacré.

=== Installation du serveur XbrowserSync

Nous allons installer XbrowserSync à partir de ses différents containers.

Ouvrez un terminal et suivez la procédure:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Il est préférable d'exécuter les serveurs dans un répertoire privé plutôt que dans le répertoire web pour des questions de sécurité. Tapez:
+
[source,bash]
----
cd /var/lib
mkdir xbrowsersync
cd xbrowsersync
----
. Nous allons créer plusieurs fichiers. D'abord nous créons le fichier de composition docker. Tapez:
+
[source,bash]
----
vi docker-compose.yml
----
. Insérer dans le fichier les données ci-après et sauvegardez puis quittez:
+
[source,yaml]
----
version: "3.7"

services:
  db:
    container_name: "xbs-db"
    environment:
      - "MONGO_INITDB_DATABASE=$DB_NAME"
      - "MONGO_INITDB_ROOT_PASSWORD=$DB_PASSWORD"
      - "MONGO_INITDB_ROOT_USERNAME=$DB_USERNAME"
      - "XBS_DB_NAME=$DB_NAME"
      - "XBS_DB_PASSWORD=$DB_PASSWORD"
      - "XBS_DB_USERNAME=$DB_USERNAME"
    image: "mongo"
    restart: "unless-stopped"
    volumes:
      - "xbs-db-data:/data/db"
      - "xbs-db-backups:/data/backups"
      - "./mongoconfig.js:/docker-entrypoint-initdb.d/mongoconfig.js"
  api:
    container_name: "xbs-api"
    depends_on:
      - "db"
    environment:
      - "XBROWSERSYNC_DB_PWD=$DB_PASSWORD"
      - "XBROWSERSYNC_DB_USER=$DB_USERNAME"
    healthcheck:
      test: [ "CMD", "node", "/usr/src/api/healthcheck.js" ]
      interval: "1m"
      timeout: "10s"
      retries: "5"
      start_period: "30s"
    image: "xbrowsersync/api"
    ports:
      - 127.0.0.1:8017:8080
    restart: "unless-stopped"
    volumes:
      - "./settings.json:/usr/src/api/config/settings.json"
      - "./healthcheck.js:/usr/src/api/healthcheck.js"
volumes:
  xbs-db-backups:
  xbs-db-data:
----
. Ensuite, nous créons le fichier `.env`. Tapez:
+
[source,bash]
----
vi .env
----
. Insérer dans le fichier les données ci après et sauvegardez puis quittez:
+
[source,yaml]
----
API_HOSTNAME=xbrowsersync.example.com <1>
DB_NAME=xbrowsersync
DB_PASSWORD=[PASSWORD] <2>
DB_USERNAME=xbsdb
COMPOSE_CONVERT_WINDOWS_PATHS=1
----
<1> remplacer example.com par votre nom de domaine
<2> remplacez [PASSWORD] par <<#pass_gen, votre mot de passe généré>>
. Ensuite, nous créons le fichier `settings.json`. Tapez:
+
[source,bash]
----
vi settings.json
----
. Insérer dans le fichier les données ci après et sauvegardez puis quittez:
+
[source,json]
----
{
  "db": {
    "host": "db"
  },

  "status": {
          "online": true,
          "allowNewSyncs": true, <1>
          "message": "Votre superbe message de Bienvenue"
  },
  "maxSyncs": 5242, <2>
  "maxSyncSize": 512000, <3>
  "throttle": {
    "maxRequests": 1000, <4>
    "timeWindow": 300000 <5>
  }
}

----
<1> pour éviter de laisser votre serveur ouvert à toute personne, vous devez ici mettre cette valeur à false une fois tous les comptes créés
<2> Nombre maximum de syncs unique qui peuvent être stockés
<3> Volume maximum de stockage par sync unique (comme les données sont compressées, le volume de bookmark peut être beaucoup plus grand)
<4> Nombre maximum de requête dans la "timeWindow"
<5> Fenêtre temporelle en millisecondes (5 minutes ici)
. Ensuite, nous créons le fichier `healthcheck.js`. Tapez:
+
[source,bash]
----
vi healthcheck.js
----
. Insérer dans le fichier les données ci après et sauvegardez puis quittez:
+
[source,javascript]
----
const http = require('http');

const response = http.request(
  {
    host: '0.0.0.0',
    method: 'GET',
    path: '/info',
    port: 8080,
    timeout: 2000,
  },
  (res) => {
    let body = '';
    res.setEncoding('utf8');

    res.on('data', (chunk) => {
      body += chunk;
    });

    res.on('end', () => {
      if (res.statusCode === 200) {
        const payload = JSON.parse(body);
        switch (payload.status) {
          case 1:
          case 3:
            console.log('HEALTHCHECK: online');
            process.exit(0);
          case 2:
          default:
            console.log('HEALTHCHECK: offline');
        }
      } else {
        console.log('HEALTHCHECK: offline');
      }
      process.exit(1);
    });
  }
);

response.on('error', function (err) {
  console.log('HEALTHCHECK: offline');
  process.exit(1);
});

response.end();
----
. Enfin, nous créons le fichier `mongoconfig.js`. Tapez:
+
[source,bash]
----
vi mongoconfig.js
----
. Insérer dans le fichier les données ci après et sauvegardez puis quittez:
+
[source,javascript]
----
db.newsynclogs.createIndex( { "expiresAt": 1 }, { expireAfterSeconds: 0 } );
db.newsynclogs.createIndex( { "ipAddress": 1 } );
db.bookmarks.createIndex( { "lastAccessed": 1 }, { expireAfterSeconds: 21*86400 } );
----
. Nous pouvons maintenant démarrer les volumes docker. Tapez
+
[source,bash]
----
docker-compose up -d
----

=== Création du site web de XbrowserSync

Appliquez la procédure suivante:

. Allez dans la rubrique `DNS`, sélectionnez le menu `Zones`, Sélectionnez votre Zone, Allez dans l'onglet `Records`.
.. Cliquez sur `A` et saisissez:
** `Hostname:` <- Tapez `xbrowsersync`
** `IP-Address:` <- Double cliquez et sélectionnez l'adresse IP de votre serveur
.. Cliquez sur `Save`
. Créer un <<#subdomain-site, sub-domain (vhost)>> dans le configurateur de sites.
.. Lui donner le nom `xbrowsersync`.
.. Le faire pointer vers le web folder `xbrowsersync`.
.. Sélectionnez `None` dans `Auto-subdomain`
.. Activer `let’s encrypt SSL`
.. Activer `PHP-FPM` pour PHP
.. Dans l'onglet Redirect Cochez la case `Rewrite HTTP to HTTPS`
.. Dans l’onglet Options:
.. Dans la boite `Apache Directives:` saisir le texte suivant:
+
[source,apache]
----

<Proxy *>
Order deny,allow
Allow from all
</Proxy>

ProxyRequests Off
ProxyPass /stats !
ProxyPass /.well-known/acme-challenge !

# redirect from server
#

SetEnvIf Authorization "(.*)" HTTP_AUTHORIZATION=$1
ProxyPreserveHost    On


ProxyPass / http://localhost:8017/
ProxyPassReverse / http://localhost:8017/

RedirectMatch ^/$ https://xbrowsersync.example.com <1>
----
<1> remplacer `example.com` par votre nom de domaine

=== Configuration de votre navigateur avec XbrowserSync

Votre site web `XbrowserSync` est installé et opérationnel.

Il faut maintenant configurer la synchronisation dans votre navigateur:

. Pointez votre navigateur sur votre site web `XbrowserSync`
. la page de présentation de l'API doit s'afficher
. Dans votre navigateur installer le plugin XBrowserSync
. Cliquez sur l'icone XBrowserSync et sélectionnez `Switch Service`
. Dans la fenètre, Tapez l'URL de votre server: https://xbrowsersync.example.com.
. Cliquez sur le bouton `Update`. Le message de bienvenue de votre serveur apparait.
. Cliquez sur `Create a new Sync`
. Tapez un <<#pass_gen, mot de passe généré>>.
. Confirmez le en le tapant de nouveau.
. Cliquez sur `Sync`
. Les bookmarks sont synchronisés !

=== Interdire d'autre créations de comptes.

Appliquez la procédure suivante:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Tapez:
+
[source,bash]
----
cd /var/lib/xbrowsersync
docker-compose down
----
. Editez le fichier `settings.json`. Tapez:
+
[source,bash]
----
vi settings.json
----
. Sur la ligne contenant le mot `allowNewSyncs`, remplacez par:
+
[source]
----
          "allowNewSyncs": false,
----
. Sauvegardez. Nous pouvons maintenant redémarrer les volumes docker. Tapez
+
[source,bash]
----
docker-compose up -d
----

Si vous voulez réactiver les créations de comptes, réappliquez la procédure en mettant cette fois ci la valeur de `allowNewSyncs` à `true`.

=== Upgrade de XbrowserSync

Rien a faire pour la mise à jour si vous utilisez `Watchtower`
Vous pouvez aussi appliquer la procédure de mise à jour des containers à l'aide de <<#port_container_updt, `Portainer`>> ou à l'aide <<#yacht_container_updt, `Yacht`>>

Sinon, effectuez les opérations suivantes:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Allez dans le répertoire de root
. Mettez à jour le docker de XbrowserSync. Tapez:
+
[source,bash]
----
docker pull mongo
docker pull xbrowsersync/api
docker-compose down
docker-compose up -d
----

