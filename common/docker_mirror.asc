== Configuration d'un repository local Docker

L'outil Registry est un système de dépot local pour Docker

Si vous avez plusieurs machines utilisant docker sur votre réseau, les déploiements et les mises à jour seront considérablement accélérées par l'utilisation de ce système de cache.
Ce cache évitera aussi d'atteindre la limite d'accès sur le repository principal de docker

Suivez la procédure suivante:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Créez un volume et lancer le repository. Tapez:
+
[source,bash]
----
docker volume create registry
docker run -d -p 5000:5000 --restart always --name registry  --volume registry:/var/lib/registry registry:2
----
.C'est fait !

. <<#root_login, Loguez vous comme root sur le poste client>>
. Tapez:
+
[source,bash]
----
vi /etc/docker/daemon.json
----
. Dans le fichier, ajoutez:
+
[source]
----
{
  "insecure-registries" : ["docker.example.com:5000" ], <1>
}
----
<1> remplacer `docker.example.com` par le nom ou l'adresse ip de votre cache docker. Si vous en avez plusieurs vous devez tous les lister en les séparant par des virgules. Le numéro de port doit correspondre à celui choisi au lancement du container.
. Sauvegarder le fichier et redémarrez le démon docker. Tapez: 
+
[source,bash]
----
systemctl restart docker
----

== Configuration de Docker-mirror

L'outil Docker-mirror est un système de cache de fichier Dockers.

Si vous avez plusieurs machines utilisant docker sur votre réseau, les déploiements et les mises à jour seront considérablement accélérées par l'utilisation de ce système de cache.

Suivez la procédure suivante:

. <<#root_login, Loguez vous comme root sur le serveur>>
. Obtenez une configuration initiale pour le fichier `config.yml`. Tapez:
+
[source,bash]
----
docker run -it --rm --entrypoint cat registry:2 /etc/docker/registry/config.yml > /etc/docker-mirror.yml
----
. Ajoutez ceci dans le fichier `config.yml`. Tapez:
+
[source,bash]
----
vi /etc/docker-mirror-1.yml
----
. Dans ce fichier, ajoutez les lignes suivantes :
+
[source]
----
proxy:
      remoteurl: https://registry-1.docker.io
----
. Démarrez ensuite le service docker. Tapez:
+
[source,bash]
----
docker volume create registry-proxy1
docker run -d --restart=always -p 5001:5000 --name docker-registry-proxy-1 -v registry-proxy1:/var/lib/registry -v /etc/docker-mirror-1.yml:/etc/docker/registry/config.yml registry:2
----
.C'est fait !

Si vous avez plusieurs miroirs à configurer, il faut créer un proxy sur chaque. Ainsi si vous voulez créer un miroir pour `ghcr.io` il vous faudra créer une autre fichier docker-mirror-2.yml avec la deuxième adresse remote.
+
[source]
----
proxy:
      remoteurl: https://ghcr.io
----
. Lancer le tout par:
+
[source,bash]
----
docker volume create registry-proxy2
docker run -d --restart=always -p 5002:5000 --name docker-registry-proxy-2 -v registry-proxy2:/var/lib/registry -v /etc/docker-mirror-2.yml:/etc/docker/registry/config.yml registry:2
----

Et ainsi de suite pour chaque proxy que vous voulez mettre en place.

Sur le poste client, soit passez l'option --registry-mirror lorsque vous lancez le démon `dockerd` ou sinon éditez le fichier `/etc/docker/daemon.json` et ajoutez la clé `registry-mirrors` pour rendre le changement persistant:

. <<#root_login, Loguez vous comme root sur le poste client>>
. Tapez:
+
[source,bash]
----
vi /etc/docker/daemon.json
----
. Dans le fichier, ajoutez:
+
[source]
----
{
  "insecure-registries" : ["docker.example.com:5001", "docker.example.com:5002" ], <1>
  "registry-mirrors": ["http://docker.example.com:5001", "docker.example.com:5002"] <1>
}
----
<1> remplacer `docker.example.com` par le nom ou l'adresse ip de votre cache docker. Si vous en avez plusieurs vous devez tous les lister en les séparant par des virgules comme présenté dans l'exemple
. Sauvegarder le fichier et redémarrez le démon docker. Tapez: 
+
[source,bash]
----
systemctl restart docker
----
